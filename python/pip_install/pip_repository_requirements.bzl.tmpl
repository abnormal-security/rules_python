"""Starlark representation of locked requirements.

@generated by rules_python pip_parse repository rule
from %%REQUIREMENTS_LOCK%%
"""

%%IMPORTS%%

all_requirements = %%ALL_REQUIREMENTS%%

all_whl_requirements = %%ALL_WHL_REQUIREMENTS%%

_packages = %%PACKAGES%%
_cluster_mappings = %%CLUSTER_MAPPINGS%%
requirement_clusters = %%CLUSTERS%%
_config = %%CONFIG%%
_annotations = %%ANNOTATIONS%%

def _clean_name(name):
    return name.replace("-", "_").replace(".", "_").lower()

def requirement(name, use_clusters=True):
    cname = _clean_name(name)
    if cname in _cluster_mappings and use_clusters:
        return "@%%NAME%%//:" + _cluster_mappings[cname]
    else:
        return "@%%NAME%%_" + cname + "//:pkg"

def whl_requirement(name, use_clusters=True):
    cname = _clean_name(name)
    if cname in _cluster_mappings and use_clusters:
       return "@%%NAME%%//:whl_" + _cluster_mappings[cname]
    return "@%%NAME%%_" + cname + "//:whl"

def data_requirement(name):
    cname = _clean_name(name)
    return "@%%NAME%%_" + _clean_name(name) + "//:data"

def dist_info_requirement(name):
    cname = _clean_name(name)
    return "@%%NAME%%_" + _clean_name(name) + "//:dist_info"

def entry_point(pkg, script = None):
    cname = _clean_name(pkg)
    if not script:
        script = pkg
    return "@%%NAME%%_" + cname + "//:rules_python_wheel_entry_point_" + script

def _get_annotation(requirement):
    # This expects to parse `setuptools==58.2.0     --hash=sha256:2551203ae6955b9876741a26ab3e767bb3242dafe86a32a749ea0d78b6792f11`
    # down to `setuptools`.
    name = requirement.split(" ")[0].split("=")[0].split("[")[0]
    return _annotations.get(name)

def install_deps(**whl_library_kwargs):
    whl_config = dict(_config)
    whl_config.update(whl_library_kwargs)
    # Install normal requirements
    for name, spec in _packages:
        whl_library(
            name = name,
            requirement = spec,
            annotation = _get_annotation(spec),
            **whl_config
        )
    # And deal with requirement_clusters
    for cname, components in requirement_clusters.items():
        # Generate the component libraries
        cnames = [c[0] for c in components]
        for rname, spec in components:
            name = "%%NAME%%_" + rname
            whl_library(
               name = name,
               requirement = spec,
               annotation = _get_annotation(spec),
               skip_deps = cnames,
               **whl_config,
            )
